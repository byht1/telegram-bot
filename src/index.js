import TelegramBot from "node-telegram-bot-api";
import * as dotenv from "dotenv";
import { optionsWether, optionsMain, currency } from "./options/index.mjs";
import { currencyDate, city, hourlyWeather } from "./modules/index.mjs";
import { currencyDeflated } from "./api/bankApi.mjs";

dotenv.config();

const TOKEN = process.env.BOT_TOKEN;

const bot = new TelegramBot(TOKEN, { polling: true });

const start = async () => {
  bot.setMyCommands([
    {
      command: "/start",
      description: "–ü—Ä–∏–≤—ñ—Ç —è –¥–æ–ø–æ–º–æ–∂—É –∑ –≤–∏–±–æ—Ä–æ–º –æ–¥—è–≥—É –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –¥–µ–Ω—å",
    },
  ]);

  bot.on("message", async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    // Switch –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –æ—Å–∞–∑–Ω–∞–Ω–æ

    // main
    if (text === "–û—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –≤–∞–ª—é—Ç") return currencyBtn(chatId);
    if (text === "–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏") return weatherInterval(chatId);

    //weather
    if (text === "–ó–∞ –∫–æ–∂–Ω—ñ 3 –≥–æ–¥–∏–Ω–∏") return await wether(chatId, 3, city[0]);
    if (text === "–ó–∞ –∫–æ–∂–Ω—ñ 6 –≥–æ–¥–∏–Ω–∏") return await wether(chatId, 6, city[1]);

    // currency
    if (text === "USD")
      return await currencyServer(chatId, currencyDeflated[0]);
    if (text === "EUR")
      return await currencyServer(chatId, currencyDeflated[1]);

    await main(chatId);
  });
};

start();

async function main(id) {
  await bot.sendMessage(id, "–©–æ –≤–∏ –±–∞–∂–∞—î—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏?", optionsMain);
}

async function currencyBtn(id) {
  await bot.sendMessage(id, "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –≤–∞–ª—é—Ç–∏", currency);
}

async function currencyServer(id, currency) {
  const res = await currencyDate(currency);
  await bot.sendMessage(id, `–ö—É—Ä—Å ${currency}${res}`, optionsMain);
}

async function weatherInterval(id) {
  await bot.sendMessage(
    id,
    "–ó —è–∫–∏–º –ø–µ—Ä—ñ–æ–¥–æ–º –≤–∏ –±–∞–∂–∞—î—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏?",
    optionsWether.interval
  );
}

async function wether(id, interval, city) {
  const res = await hourlyWeather(interval, city);
  await bot.sendMessage(id, res, optionsMain);
}

// bot.on("callback_query", async (msg) => {
//   console.log("üöÄ ~ msg", msg);
//   const data = msg.data;
//   const chatId = msg.message.chat.id;

//   if (data === "/city") {
//     await bot.sendMessage(chatId, "–í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ", options.city);
//   }

//   const btnInterval = dynamicRange(data);

//   if (data === "/pryluky") {
//     await bot.sendMessage(
//       chatId,
//       "–ó —è–∫–∏–º –ø–µ—Ä—ñ–æ–¥–æ–º –≤–∏ –±–∞–∂–∞—î—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏?",
//       btnInterval
//     );
//   }

//   if (data === "/kyiv") {
//     await bot.sendMessage(
//       chatId,
//       "–ó —è–∫–∏–º –ø–µ—Ä—ñ–æ–¥–æ–º –≤–∏ –±–∞–∂–∞—î—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏?",
//       btnInterval
//     );
//   }

//   const newData = data.split("/");

//   if (newData[1] === "hours3") {
//     const data = await hourlyWeather(3, newData[2]);

//     await bot.sendMessage(chatId, data, options.interval);
//   }
//   if (newData[1] === "hours6") {
//     const data = await hourlyWeather(6, newData[2]);

//     await bot.sendMessage(chatId, data, options.interval);
//   }
// });
